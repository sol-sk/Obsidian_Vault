{"path":"W2023T2/W2023T2 Files/Slides/COGS300-L2-Turing.pdf","text":"COGS300 The Turing Machine Instructor: Márton Sóskuthy marton.soskuthy@ubc.ca TAs: Daichi Furukawa · Victoria Lim · Amy Wang cogs.300@ubc.ca Cognition as computation? 2 The omelette machine // find the ingredients number_of_eggs = 3; eggs = find(\"eggs\", number_of_eggs); milk = find(\"milk\", a_little); bowl = find(\"bowl\", 1); salt = find(\"salt\", a_pinch); pepper = find(\"pepper\", a_pinch); butter = find(\"butter\", a_knob); parsley = find(\"parsley\", a_bunch); pan = find(\"pan\", 1); // chop the parsley parsley_size = estimateSize(parsley); while (parsley_size > 2) { parsley = chop(parsley); parsley_size = estimateSize(parsley); } // crack the eggs for (int e = 1; e <= number_of_eggs; e++) { egg = eggs[e]; cracked_egg = crack(egg); bowl = bowl + cracked_egg; } // add milk, beat the eggs bowl = bowl + milk; for (int i = 1; i <= 12; i++) { beat(bowl); } // melt some butter in a pan pan = pan + butter; cook(pan, 30); // add the eggs, cook for 2 minutes, // then fold and cook for 1 minute pan = pan + bowl; cook(pan, 120); fold(pan); cook(pan, 60); // add salt, pepper, parsley pan = pan + salt + pepper + parsley; 3 Heavily computational leanings of early cognitive science inspired by: • systems of formal logic • Turing machine • physical computers 4 Formal logic 5 • p: My dog is happy. • q: It’s raining. p → ¬q q ____________________ ∴ ¬p Formal logic • p: My dog is happy. • q: It’s raining. p → ¬q q ____________________ ∴ ¬p 6 p q p → ¬q F F T F T T T F T T T F Formal logic • p: My dog is happy. • q: It’s raining. p → ¬q q ____________________ ∴ ¬p 7 p q p → ¬q F F T F T T T F T T T F Formal logic • p: My dog is happy. • q: It’s raining. p → ¬q q ____________________ ∴ ¬p 8 p q p → ¬q F F T F T T T F T T T F Formal logic • p: My dog is happy. • q: It’s raining. p → ¬q q ____________________ ∴ ¬p syntax: primitive symbols, operator symbols, rules of inference r ⊢ ¬¬r (r → s) ⊢ (¬s → ¬r) {(r → s); r} ⊢ s 9 Formal logic • p: My dog is happy. • q: It’s raining. p → ¬q q ____________________ ¬¬q ¬¬q → ¬p ∴ ¬p syntax: primitive symbols, operator symbols, rules of inference r ⊢ ¬¬r (r → s) ⊢ (¬s → ¬r) {(r → s); r} ⊢ s 10 Formal logic • p: I’m happy. • q: Someone’s playing a bagpipe. p → ¬q (sorry, bagpipe players!) q ____________________ ¬¬q ¬¬q → ¬p ∴ ¬p propositional logic works the same regardless of the semantic content of the propositions! 11 Formal logic • purely syntactic operations → preservation of truth (i.e. semantics?) • in some sense, we could view this system as a model of “reasoning” • though logical fallacies are a staple of human reasoning… 12 The long-awaited Turing Machine • simple problem: counting in (reverse) binary 1000 = 1 0100 = 2 1100 = 3 0010 = 4 1010 = 5 0110 = 6 1110 = 7 0001 = 8 13 The long-awaited Turing Machine • algorithm 1: \t start at # \t # → move right \t 0 → 1, done! \t 1 → 0, move right #0000… = 0 #1000… = 1 #0100… = 2 #1100… = 3 #0010… = 4 #1010… = 5 #0110… = 6 #1110… = 7 #0001… = 8 14 The long-awaited Turing Machine • algorithm 2: \t start anywhere after (or on) the ﬁrst 1 in return \t compute: \t 0 → 1, move left, return \t 1 → 0, move right, compute \t return: \t 0 → 0, move left, return\t 1 → 1, move right, compute 10000… = 0 11000… = 1 10100… = 2 11100… = 3 10010… = 4 11010… = 5 10110… = 6 11110… = 7 10001… = 8 15 The long-awaited Turing Machine • algorithm 2: \t start anywhere after the ﬁrst 1 in return \t compute: \t 0 → 1, move left, return \t 1 → 0, move right, compute \t return: \t 0 → 0, move left, return\t 1 → 1, move right, compute 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 16 return The long-awaited Turing Machine • algorithm 2: \t start anywhere after the ﬁrst 1 in return \t compute: \t 0 → 1, move left, return \t 1 → 0, move right, compute \t return: \t 0 → 0, move left, return\t 1 → 1, move right, compute machine table 17 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 return The long-awaited Turing Machine • algorithm 2: \t if tape is empty, start anywhere after the initial 1 in return \t compute: \t 0 → 1, move left, return \t 1 → 0, move right, compute \t return: \t 0 → 0, move left, return\t 1 → 1, move right, compute 18 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 return The long-awaited Turing Machine • algorithm 2: \t if tape is empty, start anywhere after the initial 1 in return \t compute: \t 0 → 1, move left, return \t 1 → 0, move right, compute \t return: \t 0 → 0, move left, return\t 1 → 1, move right, compute 19 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 return The long-awaited Turing Machine • algorithm 2: \t if tape is empty, start anywhere after the initial 1 in return \t compute: \t 0 → 1, move left, return \t 1 → 0, move right, compute \t return: \t 0 → 0, move left, return\t 1 → 1, move right, compute 20 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 return The long-awaited Turing Machine • algorithm 2: \t if tape is empty, start anywhere after the initial 1 in return \t compute: \t 0 → 1, move left, return \t 1 → 0, move right, compute \t return: \t 0 → 0, move left, return\t 1 → 1, move right, compute 21 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 compute The long-awaited Turing Machine • algorithm 2: \t if tape is empty, start anywhere after the initial 1 in return \t compute: \t 0 → 1, move left, return \t 1 → 0, move right, compute \t return: \t 0 → 0, move left, return\t 1 → 1, move right, compute 22 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 return The long-awaited Turing Machine • algorithm 2: \t if tape is empty, start anywhere after the initial 1 in return \t compute: \t 0 → 1, move left, return \t 1 → 0, move right, compute \t return: \t 0 → 0, move left, return\t 1 → 1, move right, compute 23 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 compute The long-awaited Turing Machine • algorithm 2: \t if tape is empty, start anywhere after the initial 1 in return \t compute: \t 0 → 1, move left, return \t 1 → 0, move right, compute \t return: \t 0 → 0, move left, return\t 1 → 1, move right, compute 24 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 compute The long-awaited Turing Machine • algorithm 2: \t if tape is empty, start anywhere after the initial 1 in return \t compute: \t 0 → 1, move left, return \t 1 → 0, move right, compute \t return: \t 0 → 0, move left, return\t 1 → 1, move right, compute 25 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 return The long-awaited Turing Machine • algorithm 2: \t if tape is empty, start anywhere after the initial 1 in return \t compute: \t 0 → 1, move left, return \t 1 → 0, move right, compute \t return: \t 0 → 0, move left, return\t 1 → 1, move right, compute 26 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 return The Universal Turing Machine • Church-Turing thesis: ~ a function is algorithmically computable iﬀ it can be computed by a Turing Machine • a (Turing complete) computer: a device that can implement algorithms for any computable function Is the human brain a computer? Applications of TMs? http://maximecb.github.io/Turing-Drawings/ 28 The Turing test • a proposed threshold for identifying something/someone as an intelligent agent • human + hidden conversational partner • ongoing open-ended conversation • human thinks it’s talking to another human: intelligent agent! 29 The Turing test • a proposed threshold for identifying something/someone as an intelligent agent • human + hidden conversational partner • ongoing open-ended conversation • human thinks it’s talking to another human: intelligent agent! focus on language / verbal behaviour 30 The Turing test • a proposed threshold for identifying something/someone as an intelligent agent • human + hidden conversational partner • ongoing open-ended conversation • human thinks it’s talking to another human: intelligent agent! focus on surface behaviour 31 Turing Machines practice \t seek to end: \t 0 → 1, move left, s to start \t 1 → 1, move right, s to end \t seek to start: \t 0 → 0, move right, del 1st\t 1 → 1, move left, s to start \t delete 1st 1: \t 0 → 0, move right, del 1st\t 1 → 0, move right, s to end 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 seek to end 32 Turing Machines practice \t seek to end: \t 0 → 1, move left, s to start \t 1 → 1, move right, s to end \t seek to start: \t 0 → 0, move right, del 1st\t 1 → 1, move left, s to start \t delete 1st 1: \t 0 → 0, move right, del 1st\t 1 → 0, move right, s to end 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 seek to end 33 Turing Machines practice \t seek to end: \t 0 → 1, move left, s to start \t 1 → 1, move right, s to end \t seek to start: \t 0 → 0, move right, del 1st\t 1 → 1, move left, s to start \t delete 1st 1: \t 0 → 0, move right, del 1st\t 1 → 0, move right, s to end 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 seek to end 34 Turing Machines practice \t seek to end: \t 0 → 1, move left, s to start \t 1 → 1, move right, s to end \t seek to start: \t 0 → 0, move right, del 1st\t 1 → 1, move left, s to start \t delete 1st 1: \t 0 → 0, move right, del 1st\t 1 → 0, move right, s to end 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 seek to end 35 Turing Machines practice \t seek to end: \t 0 → 1, move left, s to start \t 1 → 1, move right, s to end \t seek to start: \t 0 → 0, move right, del 1st\t 1 → 1, move left, s to start \t delete 1st 1: \t 0 → 0, move right, del 1st\t 1 → 0, move right, s to end 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 seek to start 36 Turing Machines practice \t seek to end: \t 0 → 1, move left, s to start \t 1 → 1, move right, s to end \t seek to start: \t 0 → 0, move right, del 1st\t 1 → 1, move left, s to start \t delete 1st 1: \t 0 → 0, move right, del 1st\t 1 → 0, move right, s to end 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 seek to start 37 Turing Machines practice \t seek to end: \t 0 → 1, move left, s to start \t 1 → 1, move right, s to end \t seek to start: \t 0 → 0, move right, del 1st\t 1 → 1, move left, s to start \t delete 1st 1: \t 0 → 0, move right, del 1st\t 1 → 0, move right, s to end 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 seek to start 38 Turing Machines practice \t seek to end: \t 0 → 1, move left, s to start \t 1 → 1, move right, s to end \t seek to start: \t 0 → 0, move right, del 1st\t 1 → 1, move left, s to start \t delete 1st 1: \t 0 → 0, move right, del 1st\t 1 → 0, move right, s to end 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 seek to start 39 Turing Machines practice \t seek to end: \t 0 → 1, move left, s to start \t 1 → 1, move right, s to end \t seek to start: \t 0 → 0, move right, del 1st\t 1 → 1, move left, s to start \t delete 1st 1: \t 0 → 0, move right, del 1st\t 1 → 0, move right, s to end 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 seek to start 40 Turing Machines practice \t seek to end: \t 0 → 1, move left, s to start \t 1 → 1, move right, s to end \t seek to start: \t 0 → 0, move right, del 1st\t 1 → 1, move left, s to start \t delete 1st 1: \t 0 → 0, move right, del 1st\t 1 → 0, move right, s to end 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 seek to start 41 Turing Machines practice \t seek to end: \t 0 → 1, move left, s to start \t 1 → 1, move right, s to end \t seek to start: \t 0 → 0, move right, del 1st\t 1 → 1, move left, s to start \t delete 1st 1: \t 0 → 0, move right, del 1st\t 1 → 0, move right, s to end 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 delete 1st 1 42 Turing Machines practice \t seek to end: \t 0 → 1, move left, s to start \t 1 → 1, move right, s to end \t seek to start: \t 0 → 0, move right, del 1st\t 1 → 1, move left, s to start \t delete 1st 1: \t 0 → 0, move right, del 1st\t 1 → 0, move right, s to end 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 delete 1st 1 43 Turing Machines practice \t seek to end: \t 0 → 1, move left, s to start \t 1 → 1, move right, s to end \t seek to start: \t 0 → 0, move right, del 1st\t 1 → 1, move left, s to start \t delete 1st 1: \t 0 → 0, move right, del 1st\t 1 → 0, move right, s to end 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 seek to end 44 Turing Machines practice \t seek to end: \t 0 → 1, move left, s to start \t 1 → 1, move right, s to end \t seek to start: \t 0 → 0, move right, del 1st\t 1 → 1, move left, s to start \t delete 1st 1: \t 0 → 0, move right, del 1st\t 1 → 0, move right, s to end 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 seek to end 45 Turing Machines practice \t seek to end: \t 0 → 1, move left, s to start \t 1 → 1, move right, s to end \t seek to start: \t 0 → 0, move right, del 1st\t 1 → 1, move left, s to start \t delete 1st 1: \t 0 → 0, move right, del 1st\t 1 → 0, move right, s to end 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 seek to end 46 Turing Machines practice \t seek to end: \t 0 → 1, move left, s to start \t 1 → 1, move right, s to end \t seek to start: \t 0 → 0, move right, del 1st\t 1 → 1, move left, s to start \t delete 1st 1: \t 0 → 0, move right, del 1st\t 1 → 0, move right, s to end 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 seek to start 47 Turing Machines practice \t seek to end: \t 0 → 1, move left, s to start \t 1 → 1, move right, s to end \t seek to start: \t 0 → 0, move right, del 1st\t 1 → 1, move left, s to start \t delete 1st 1: \t 0 → 0, move right, del 1st\t 1 → 0, move right, s to end 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 seek to start 48 Turing Machines practice \t seek to end: \t 0 → 1, move left, s to start \t 1 → 1, move right, s to end \t seek to start: \t 0 → 0, move right, del 1st\t 1 → 1, move left, s to start \t delete 1st 1: \t 0 → 0, move right, del 1st\t 1 → 0, move right, s to end 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 seek to start 49 Turing Machines practice \t seek to end: \t 0 → 1, move left, s to start \t 1 → 1, move right, s to end \t seek to start: \t 0 → 0, move right, del 1st\t 1 → 1, move left, s to start \t delete 1st 1: \t 0 → 0, move right, del 1st\t 1 → 0, move right, s to end 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 delete 1st 1 50 Turing Machines practice \t seek to end: \t 0 → 1, move left, s to start \t 1 → 1, move right, s to end \t seek to start: \t 0 → 0, move right, del 1st\t 1 → 1, move left, s to start \t delete 1st 1: \t 0 → 0, move right, del 1st\t 1 → 0, move right, s to end 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 seek to end 51","libVersion":"0.3.2","langs":""}